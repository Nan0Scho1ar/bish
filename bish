#!/bin/sh
# BISH: The BioShell
# Author: Nan0Scho1ar (Christopher Mackinga)
# Created: 07/10/2020
# License: MIT License
# Self replicating shell script loader

BISH_CONFIG='
[bash]
rc_path = "$HOME/dotfiles/.bashrc"

[bish]
home = "$HOME/.config/bish"

[zsh]
rc_path = "$HOME/dotfiles/.zshrc"

# New Mutagens (functions) should be defined here
[Mutagens]
    [Mutagens.bish]
        [Mutagens.bish.SubMutation.bish_transcribe]
            remote = "n0s1.sh/bish_transcribe"

    [Mutagens.n0s1.core.toml]
        remote = "n0s1.sh/toml"
        [Mutagens.n0s1.core.toml.SubMutation.exprq]
            remote = "n0s1.sh/exprq"

    [Mutagens.n0s1.core.exprq]
            remote = "n0s1.sh/exprq"

[State]
'

bish() {
    toml -V > /dev/null || source $(curl "n0s1.sh/toml")
    case $1 in
    '')
        mutagens="$(echo "$BISH_CONFIG" | toml get_headers Mutagens)"
        echo -e "#!/bin/sh\n# BISH: The BioShell\n# Generated: $(date)\n# License: MIT License\n"
        echo -e "BISH_CONFIG = '$BISH_CONFIG'\n"
        for mutagen in $mutagens; do type $mutagen | tail -n +2 && echo; done
        echo -e "\nbish init"
        ;;
    'init')
        BISH_SHELL="$(awk -F: -v u="$USER" 'u==$1&&$0=$NF' /etc/passwd) | sed 's|/bin/||'"
        echo $BISH_SHELL
        rc_path="$(echo "$BISH_CONFIG" | toml get "$BISH_SHELL.rc_path")";
        source "$rc_path"
        case $BISH_SHELL in
        'bash') echo "bash";
            #rc_path="$HOME/dotfiles/.bashrc"
              ;;
        'zsh' ) echo "zsh" ;;
           *  ) echo "sh" ;;
        esac
        echo -e "bioshell v0.0.3";
        ;;
    'conf')
        echo $BISH_CONFIG | toml "$2" "$3" "$4"
        ;;
    'fetch')
        source "$(curl "$(echo $BISH_CONFIG | toml get "Mutagens.$2.remote")")"
        ;;
    'mutate')
        # TODO Check if any mutagens missing from conf
        echo "TODO Mutate, fetch transcribe"
        # TODO Don't double dependencies if met elsewhere
        ;;
    *)
        mutation="$(echo "$BISH_CONFIG" | toml get "Mutagens.bish.SubMutation.$1"
        mutation="$(echo "$BISH_CONFIG" | toml get "$BISH_SHELL.rc_path")";

        ;;
    esac
}

exprq() { expr "$1" : "$2" 1>/dev/null; }

toml() {
    [ -z $1 ] && lines="$(echo "$(< /dev/stdin)")" || lines="$(cat "$1")";
    parent="$(echo $3 | sed 's/\(.*\)\.\(.*\)/\1/')"
    key="$(echo $3 | sed 's/\(.*\)\.\(.*\)/\2/')"
    value="$4"

    if [ $1 = "get" ]; then
        #Global
        if exprq "$parent" "$key"; then
            echo "$lines" | sed -n "/\\[.*\\]/q;p" | \
            # TODO support multiline arrays
                sed -n "s/^\s*$key=\(.*\)/\1/p"
        # Filter to subheading then get value
        else
            echo "$lines" | sed -n "/^\s*\[$parent\]/,/\[.*\]/{//!p;}" | \
                # TODO support multiline arrays
                sed -n "s/^\s*$key=\(.*\)/\1/p"
        fi

    if [ $1 = "get_headers" ]; then
        #Global
            echo "$lines" | sed -n "/^\s*\[$parent\]/,/\[.*\]/{//!p;}" | \
                # TODO support multiline arrays
                sed -n "s/^\s*$key=\(.*\)/\1/p"
        fi

    #TODO Fix file indenting
    elif [ $1 = "set" ]; then
        if exprq "$parent" "$key"; then
            updated=false
            echo "$lines" | sed -n "/\\[.*\\]/q;p" | \
            while read line; do
                if exprq "$line" "$key=.*"; then
                    echo "$key=$value";
                    updated=true;
                    continue;
                fi
                echo $line;
            done
            $updated || echo "$key=$value";
            echo "$lines" | sed -n "/\\[.*\\]/,/EOF/p"
        else
            in_parent=false
            # try to update value for existing header
            cat "$2" | while read line; do
                exprq "$line" "\\[.*\\]" && in_parent=false;
                # Set in_parent if currently inside correct header
                exprq "$line" "\\[$parent\\]" && in_parent=true;
                if $in_parent; then
                    # Write new value if existing key found
                    if exprq "$line" "$key=.*"; then
                        echo "$key=$value";
                        in_parent=false;
                        continue;
                        # Write new value if existing key not found
                        # before entering next header
                    elif exprq "$line" "\\[.*\\]" && \
                        ! exprq "$line" "\\[$parent\\]"; then
                            echo "$key=$value";
                            in_parent=false;
                    fi
                fi
                echo $line;
            done;
            # If the header doesn't exist add it and the value
             if ! echo "$lines" | grep -q "\\[$parent\\]"; then
                # TODO Recursively look for parent headers not dump
                # at bottom of file
                echo "[$parent]" >> $2 && echo "$key=$value" >> $2
                return
            fi
        fi
    fi
}

bish init
